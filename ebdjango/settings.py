"""
Django settings for ebdjango project.

Generated by 'django-admin startproject' using Django 1.11.14.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from ebdjango.scripts import AWSParameterStore
from ebdjango.scripts import GeneralFunctions

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Get the Environment Type from the EC2 instance, codebuild, local pc etc.
# This is used to define database connections etc
AWS_ENV_TYPE = os.environ.get('EnvType', '')

# Setup AWS Parameter Store for database connections etc.
AWS_PSTORE_PROJECT = '/MarksWebsite/'
AWS_PSTORE_REGION = 'eu-west-2'
if AWS_ENV_TYPE == 'test' or AWS_ENV_TYPE == 'prod':
    AWSPStore = AWSParameterStore(AWS_PSTORE_PROJECT,
                                  AWS_ENV_TYPE,
                                  AWS_PSTORE_REGION)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if len(AWS_ENV_TYPE) > 0:
    # Get SECRET KEY FROM Parameter Store.   AWS_ENV_TYPE should be
    # test or prod
    SECRET_KEY = AWSPStore.get_parameter('SecretKey', True)
else:
    # Use default SECRET_KEY for local computer
    SECRET_KEY = 'BlahDeBlahMySecretKey'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DJANGO_DEBUG', False))


ALLOWED_HOSTS = ['myawslivehosts',
                 'myawstesthosts',
                 'mytestdomain',
                 'mylivedomain',
                 'localhost',
                 '127.0.0.1']

# Append EC2 IP to ALLOWED_HOSTS, necessary for health check to work.
GeneralFunctions.appendEC2IPToArray(ALLOWED_HOSTS)


# Application definition
INSTALLED_APPS = [
    'apps.AboutMe',
    'apps.ContactMe',
    'apps.Training',
    'apps.MyProjects',
    'apps.MySearch',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

'''
MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
'''


ROOT_URLCONF = 'ebdjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['ebdjango/templates/'],      # MJW Update
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ebdjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

if len(AWS_ENV_TYPE) > 0:
    # Get SECRET KEY FROM Parameter Store.   AWS_ENV_TYPE should be
    # test or prod
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'dbMarksWebsite_'+AWS_ENV_TYPE,
            'USER': AWSPStore.get_parameter('DBUser', False),
            'PASSWORD': AWSPStore.get_parameter('DBPWD', True),
            'HOST': AWSPStore.get_parameter('DBHOST', False),
            'PORT': AWSPStore.get_parameter('DBPORT', False),
        }
    }
else:
    # Connect to your localhost database for development work
    # (db is on localhost)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'MyDatabaseName',
            'USER': 'MyDatabaseUserWithAbilityToCreateDBs',
            'PASSWORD': 'MyPassword',
            'HOST': 'localhost',
            'PORT': '3306',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static'

STATICFILES_DIRS = [
    './ebdjango/static/',
]

# Please note that this generates index'd files within the static directory,
# however I don't really want to keeps a huge directory full of static files,
# so I have a tendancy to clean this directory out regulary.
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.'\
                        'ManifestStaticFilesStorage'


# I spent considerable time looking at logging on aws.   Django tends to run
# as the user wsgi on linux.   There is also a group called wsgi, but they are
# not the same.   It is possible to create a log file in the /opt/python/log
# directory (wsgi group owns this) and then give ownership to the user wsgi.
# Then you have to worry about when the log file gets too big etc. If you
# write the lot out to the console, it will be collected within the
# /var/log/httpd/error_log which can easily be copied and filtered by
# [ebdjango]. AWS can then look after this file. I have a default LOG_LEVEL
# of ERROR and then change this to DEBUG in test and on my local computer.

# I DECIDED TO LOG TO THE CONSOLE WHEN IN test or prod AND TO A FILE WHEN
# RUNNING LOCALLY.

LOG_LEVEL = 'ERROR' if (AWS_ENV_TYPE == 'prod') else 'DEBUG'

if len(AWS_ENV_TYPE) > 0:

    # PROD/TEST Logging

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'ebdjangoFormat': {
                'format': "[%(asctime)s] [%(levelname)s] [ebdjango]"
                          " [%(pathname)s] [%(funcName)s] [%(lineno)d]"
                          " [%(message)s]"
                },
        },
        'handlers': {
            'console': {
                'level': LOG_LEVEL,
                'class': 'logging.StreamHandler',
                'formatter': 'ebdjangoFormat',
            },
        },
        'loggers': {
            'ebdjango': {
                'handlers': ['console'],
                'level': LOG_LEVEL,
                'propagate': True,
            },
        },
    }

else:

    # Logging for local machine in file ebdjango_logging.log
    # This also logs 'django' logs.

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'ebdjangoFormat': {
                'format': "[%(asctime)s] [%(levelname)s] [ebdjango]"
                          " [%(pathname)s] [%(funcName)s] [%(lineno)d]"
                          " [%(message)s]"
                },
        },
        'handlers': {
            'file': {
                'level': LOG_LEVEL,
                'class': 'logging.FileHandler',
                'filename': 'ebdjango_logging.log',
                'formatter': 'ebdjangoFormat',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': LOG_LEVEL,
                'propagate': True,
            },
            'ebdjango': {
                'handlers': ['file'],
                'level': LOG_LEVEL,
                'propagate': True,
            },
        },
    }
